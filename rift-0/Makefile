# RIFT Stage-0 Root Makefile
# Part of AEGIS Project - OBINexus Computing
# Orchestrates CMake build with governance compliance

# Build configuration
BUILD_TYPE ?= Release
BUILD_DIR ?= build
INSTALL_PREFIX ?= /usr/local
CMAKE ?= cmake
JOBS ?= $(shell nproc || echo 4)

# AEGIS compliance flags
AEGIS_COMPLIANT ?= ON
QUANTUM_MODE ?= ON
BUILD_TESTS ?= ON
PANIC_MODE ?= ON

# Output directories
OBJ_DIR := $(BUILD_DIR)/obj
BIN_DIR := $(BUILD_DIR)/bin
LIB_DIR := $(BUILD_DIR)/lib

# Color codes for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[0;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Default target
.PHONY: all
all: build

# Create build directory and configure
.PHONY: configure
configure:
	@echo "$(BLUE)Configuring RIFT Stage-0 build...$(NC)"
	@mkdir -p $(BUILD_DIR)
	@cd $(BUILD_DIR) && $(CMAKE) .. \
		-DCMAKE_BUILD_TYPE=$(BUILD_TYPE) \
		-DCMAKE_INSTALL_PREFIX=$(INSTALL_PREFIX) \
		-DBUILD_SHARED_LIBS=ON \
		-DENABLE_QUANTUM_MODE=$(QUANTUM_MODE) \
		-DAEGIS_COMPLIANCE=$(AEGIS_COMPLIANT) \
		-DBUILD_TESTS=$(BUILD_TESTS) \
		-DENABLE_PANIC_MODE=$(PANIC_MODE)
	@echo "$(GREEN)Configuration complete!$(NC)"

# Build all targets
.PHONY: build
build: configure
	@echo "$(BLUE)Building RIFT Stage-0...$(NC)"
	@$(CMAKE) --build $(BUILD_DIR) -- -j$(JOBS)
	@echo "$(GREEN)Build complete!$(NC)"
	@echo "$(YELLOW)Toolchain: riftlang.exe → .so.a → rift.exe → gosilang$(NC)"

# Clean build
.PHONY: clean
clean:
	@echo "$(YELLOW)Cleaning build artifacts...$(NC)"
	@rm -rf $(BUILD_DIR)
	@echo "$(GREEN)Clean complete!$(NC)"

# Deep clean (including generated files)
.PHONY: distclean
distclean: clean
	@echo "$(YELLOW)Removing all generated files...$(NC)"
	@rm -f gov.riftrc.*
	@rm -rf .cmake
	@find . -name "*.o" -delete
	@find . -name "*.so" -delete
	@find . -name "*.a" -delete
	@echo "$(GREEN)Distribution clean complete!$(NC)"

# Install targets
.PHONY: install
install: build
	@echo "$(BLUE)Installing RIFT Stage-0...$(NC)"
	@$(CMAKE) --install $(BUILD_DIR)
	@echo "$(GREEN)Installation complete!$(NC)"

# Run QA tests with assertion validation
.PHONY: test
test: build
	@echo "$(BLUE)Running QA test suite...$(NC)"
	@echo "$(YELLOW)Test categories:$(NC)"
	@echo "  - True Positive (TP): Valid tokens correctly identified"
	@echo "  - True Negative (TN): Invalid tokens correctly rejected"
	@echo "  - False Positive (FP): Invalid tokens incorrectly accepted"
	@echo "  - False Negative (FN): Valid tokens incorrectly rejected"
	@cd $(BUILD_DIR) && ctest --verbose --output-on-failure
	@echo "$(GREEN)QA tests complete!$(NC)"

# Specific test targets
.PHONY: test-tp
test-tp: build
	@echo "$(BLUE)Running True Positive tests...$(NC)"
	@cd $(BUILD_DIR) && ctest -R "TruePositive" --verbose

.PHONY: test-tn
test-tn: build
	@echo "$(BLUE)Running True Negative tests...$(NC)"
	@cd $(BUILD_DIR) && ctest -R "TrueNegative" --verbose

.PHONY: test-fp
test-fp: build
	@echo "$(BLUE)Running False Positive tests...$(NC)"
	@cd $(BUILD_DIR) && ctest -R "FalsePositive" --verbose

.PHONY: test-fn
test-fn: build
	@echo "$(BLUE)Running False Negative tests...$(NC)"
	@cd $(BUILD_DIR) && ctest -R "FalseNegative" --verbose

# AEGIS governance validation
.PHONY: validate
validate: build
	@echo "$(BLUE)Validating AEGIS compliance...$(NC)"
	@./scripts/validate_aegis.sh || true
	@echo "$(YELLOW)Checking governance files...$(NC)"
	@test -f $(BUILD_DIR)/gov.riftrc.0 && echo "$(GREEN)✓ Stage-0 governance file present$(NC)" || echo "$(RED)✗ Missing governance file$(NC)"
	@echo "$(YELLOW)Verifying build artifacts...$(NC)"
	@test -f $(BIN_DIR)/riftlang.exe && echo "$(GREEN)✓ riftlang.exe built$(NC)" || echo "$(RED)✗ Missing riftlang.exe$(NC)"
	@test -f $(LIB_DIR)/rift-stage0.so.a && echo "$(GREEN)✓ .so.a intermediate built$(NC)" || echo "$(RED)✗ Missing .so.a$(NC)"
	@test -f $(LIB_DIR)/librift-stage0.so && echo "$(GREEN)✓ Shared library built$(NC)" || echo "$(RED)✗ Missing shared library$(NC)"

# Generate governance configuration
.PHONY: governance
governance:
	@echo "$(BLUE)Generating governance configuration...$(NC)"
	@mkdir -p $(BUILD_DIR)
	@echo "# RIFT Stage-0 Governance Configuration" > gov.riftrc.0
	@echo "# Generated by Makefile" >> gov.riftrc.0
	@echo "[compliance]" >> gov.riftrc.0
	@echo "aegis_enabled = true" >> gov.riftrc.0
	@echo "version = 0.1.0" >> gov.riftrc.0
	@echo "" >> gov.riftrc.0
	@echo "[error_levels]" >> gov.riftrc.0
	@echo "warning = 0-3" >> gov.riftrc.0
	@echo "danger = 3-6" >> gov.riftrc.0
	@echo "critical = 6-9" >> gov.riftrc.0
	@echo "panic = 9-12" >> gov.riftrc.0
	@echo "$(GREEN)Governance file generated!$(NC)"

# Development helpers
.PHONY: dev
dev: BUILD_TYPE=Debug
dev: build
	@echo "$(GREEN)Development build complete!$(NC)"

# Run the tokenizer
.PHONY: run
run: build
	@echo "$(BLUE)Running RIFT Stage-0 tokenizer...$(NC)"
	@$(BIN_DIR)/riftlang.exe || true

# Run with example
.PHONY: example
example: build
	@echo "$(BLUE)Processing example.rift...$(NC)"
	@test -f fixtures/stage-0/examples/lang.rift && \
		$(BIN_DIR)/riftlang.exe fixtures/stage-0/examples/lang.rift || \
		echo "$(RED)Example file not found!$(NC)"

# Build documentation
.PHONY: docs
docs:
	@echo "$(BLUE)Building documentation...$(NC)"
	@doxygen Doxyfile 2>/dev/null || echo "$(YELLOW)Doxygen not found$(NC)"

# Show build information
.PHONY: info
info:
	@echo "$(BLUE)RIFT Stage-0 Build Information$(NC)"
	@echo "==============================="
	@echo "Build Type:        $(BUILD_TYPE)"
	@echo "Build Directory:   $(BUILD_DIR)"
	@echo "Install Prefix:    $(INSTALL_PREFIX)"
	@echo "Quantum Mode:      $(QUANTUM_MODE)"
	@echo "AEGIS Compliant:   $(AEGIS_COMPLIANT)"
	@echo "Build Tests:       $(BUILD_TESTS)"
	@echo "Panic Mode:        $(PANIC_MODE)"
	@echo "Jobs:              $(JOBS)"
	@echo ""
	@echo "Available targets:"
	@echo "  make all       - Build everything"
	@echo "  make clean     - Clean build artifacts"
	@echo "  make test      - Run QA test suite"
	@echo "  make validate  - Validate AEGIS compliance"
	@echo "  make install   - Install to system"
	@echo "  make run       - Run the tokenizer"
	@echo "  make example   - Process example file"

# Help target
.PHONY: help
help: info

# RIFT toolchain demonstration
.PHONY: toolchain
toolchain:
	@echo "RIFT (.rift): RIFT is a flexible translator and a direct competitor to Yacc, providing a compiler for programs written in DSL for the Gossip language."

.DEFAULT_GOAL := all