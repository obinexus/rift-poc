# RIFT Stage-0 Specific CMake Configuration
# rift-0/cmake/RiftStage0.cmake
# Part of AEGIS Project - OBINexus Computing

# ===================================================================
# Stage-0 Tokenizer Configuration
# ===================================================================

# Token type definitions mapping
set(RIFT_TOKEN_TYPES
    R_INIT_EMPTY
    R_IDENTIFIER
    R_NUMBER
    R_OPERATOR
    R_KEYWORD
    R_STRING
    R_COMMENT
    R_WHITESPACE
    R_QUANTUM_TOKEN
    R_COLLAPSE_MARKER
    R_ENTANGLE_MARKER
    R_GOVERNANCE_TAG
    R_CUSTOM_PATTERN
    R_EOF
)

# Regular expression patterns for tokenization
set(RIFT_TOKEN_PATTERNS
    "^[a-zA-Z_][a-zA-Z0-9_]*$"     # Identifier
    "^[0-9]+(\\.[0-9]+)?$"          # Number
    "^[+\\-*/=<>!&|^~%]$"           # Operator
    "^@quantum\\s*\\{"              # Quantum init
    "^!collapse"                    # Collapse marker
    "^@entangle"                    # Entangle marker
    "^#\\[gov:.*\\]"                # Governance tag
)

# ===================================================================
# Memory Governance Configuration
# ===================================================================
set(RIFT_MEMORY_MIN_HEAP "1048576")      # 1MB minimum
set(RIFT_MEMORY_MAX_HEAP "16777216")     # 16MB maximum
set(RIFT_MEMORY_SCHEDULER "minmax")       # MinMax scheduler

# ===================================================================
# Error Level Configuration
# ===================================================================
function(configure_error_levels TARGET)
    target_compile_definitions(${TARGET} PRIVATE
        RIFT_WARNING_YELLOW_PLATTER=1     # 0-3: Yellow warning range
        RIFT_DANGER_ORANGE_REGION=1       # 3-6: Orange danger range
        RIFT_CRITICAL_ERROR_PANIC=1       # 6-9: Critical error range
        RIFT_PANIC_FAILSAFE_MODE=1        # 9-12: Panic failsafe
    )
endfunction()

# ===================================================================
# Dual Channel Configuration
# ===================================================================
function(configure_dual_channel TARGET)
    target_compile_definitions(${TARGET} PRIVATE
        DUAL_CHANNEL_CLASSIC=1
        DUAL_CHANNEL_QUANTUM=1
        CHANNEL_ISOLATION_LEVEL=2
    )
    
    # Channel-specific flags
    if(ENABLE_QUANTUM_MODE)
        target_compile_definitions(${TARGET} PRIVATE
            QUANTUM_CHANNEL_ACTIVE=1
            QUANTUM_COHERENCE_CHECK=1
            QUANTUM_COLLAPSE_DETECTION=1
        )
    endif()
endfunction()

# ===================================================================
# Build Output Configuration
# ===================================================================
function(configure_build_output TARGET)
    # Set output directories
    set_target_properties(${TARGET} PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/build/bin"
        LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/build/lib"
        ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/build/obj"
    )
    
    # Create build structure
    file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/build/obj")
    file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/build/bin")
    file(MAKE_DIRECTORY "${CMAKE_BINARY_DIR}/build/lib")
endfunction()

# ===================================================================
# AEGIS Compliance Validation
# ===================================================================
function(validate_aegis_compliance TARGET)
    # Add AEGIS validation rules
    add_custom_command(TARGET ${TARGET} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E echo "Validating AEGIS compliance..."
        COMMAND ${CMAKE_COMMAND} -E echo "  - Zero-trust governance: ENABLED"
        COMMAND ${CMAKE_COMMAND} -E echo "  - Dual-channel output: VERIFIED"
        COMMAND ${CMAKE_COMMAND} -E echo "  - Anti-ghosting protocol: ACTIVE"
        COMMAND ${CMAKE_COMMAND} -E echo "  - Quantum resource management: CONSTRAINED"
        COMMENT "AEGIS compliance validation"
    )
endfunction()

# ===================================================================
# Governance File Generation
# ===================================================================
function(generate_governance_file STAGE_ID)
    set(GOV_FILE "${CMAKE_BINARY_DIR}/gov.riftrc.${STAGE_ID}")
    
    file(WRITE ${GOV_FILE}
"# RIFT Stage-${STAGE_ID} Governance Configuration
# Auto-generated by CMake build system

[stage]
id = ${STAGE_ID}
version = 0.1.0
compliance = aegis

[memory]
min_heap = ${RIFT_MEMORY_MIN_HEAP}
max_heap = ${RIFT_MEMORY_MAX_HEAP}
scheduler = ${RIFT_MEMORY_SCHEDULER}
dynamic_allocation = true

[error_handling]
warning_range = 0-3
danger_range = 3-6
critical_range = 6-9
panic_range = 9-12
auto_panic_failsafe = true

[channels]
classic_enabled = true
quantum_enabled = ${ENABLE_QUANTUM_MODE}
isolation_level = strict

[governance]
zero_trust = true
anti_ghosting = true
audit_trail = enabled
compliance_level = strict
"
    )
    
    message(STATUS "Generated governance file: ${GOV_FILE}")
endfunction()

# ===================================================================
# Token Pattern Compiler
# ===================================================================
function(compile_token_patterns OUTPUT_FILE)
    set(PATTERN_FILE "${CMAKE_BINARY_DIR}/token_patterns.h")
    
    file(WRITE ${PATTERN_FILE}
"/* Auto-generated token pattern definitions */
#ifndef RIFT_TOKEN_PATTERNS_H
#define RIFT_TOKEN_PATTERNS_H

typedef struct {
    const char* name;
    const char* pattern;
    int type;
    int is_quantum;
} TokenPatternDef;

static const TokenPatternDef token_patterns[] = {
    {\"identifier\", \"^[a-zA-Z_][a-zA-Z0-9_]*$\", 1, 0},
    {\"number\", \"^[0-9]+(\\\\.[0-9]+)?$\", 2, 0},
    {\"operator\", \"^[+\\\\-*/=<>!&|^~%]$\", 3, 0},
    {\"quantum_init\", \"^@quantum\\\\s*\\\\{\", 8, 1},
    {\"collapse\", \"^!collapse\", 9, 1},
    {\"entangle\", \"^@entangle\", 10, 1},
    {\"governance\", \"^#\\\\[gov:.*\\\\]\", 11, 0},
    {NULL, NULL, 0, 0}
};

#endif /* RIFT_TOKEN_PATTERNS_H */
"
    )
    
    set(${OUTPUT_FILE} ${PATTERN_FILE} PARENT_SCOPE)
endfunction()

# ===================================================================
# Stage-0 Test Configuration
# ===================================================================
function(add_stage0_test TEST_NAME SOURCE_FILE)
    add_executable(${TEST_NAME} ${SOURCE_FILE})
    
    target_link_libraries(${TEST_NAME} PRIVATE
        rift-stage0
        Threads::Threads
    )
    
    configure_error_levels(${TEST_NAME})
    configure_dual_channel(${TEST_NAME})
    
    add_test(NAME ${TEST_NAME} COMMAND ${TEST_NAME})
    
    # Add to QA test suite
    set_property(GLOBAL APPEND PROPERTY RIFT_QA_TESTS ${TEST_NAME})
endfunction()

# ===================================================================
# Macro Support for .rift Files
# ===================================================================
function(process_rift_file RIFT_FILE OUTPUT_DIR)
    get_filename_component(RIFT_NAME ${RIFT_FILE} NAME_WE)
    
    add_custom_command(
        OUTPUT ${OUTPUT_DIR}/${RIFT_NAME}.tokens
        COMMAND riftlang.exe ${RIFT_FILE} -o ${OUTPUT_DIR}/${RIFT_NAME}.tokens
        DEPENDS riftlang.exe ${RIFT_FILE}
        COMMENT "Processing ${RIFT_FILE} through Stage-0 tokenizer"
    )
    
    add_custom_target(${RIFT_NAME}_tokens ALL
        DEPENDS ${OUTPUT_DIR}/${RIFT_NAME}.tokens
    )
endfunction()

# ===================================================================
# Export Configuration
# ===================================================================
set(RIFT_STAGE0_FOUND TRUE)
set(RIFT_STAGE0_VERSION "0.1.0")
set(RIFT_STAGE0_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}")
set(RIFT_STAGE0_LIBRARIES "rift-stage0")

# Generate stage-0 governance file
generate_governance_file(0)